import random

# генераторы списков


# генерируем список из 10 случайных чисел
# Вариант решения через генератор
print('создание списка случайных чисел через генератор')
gen_list = [random.randint(1, 10) for x in range(10)]
print(gen_list, len(gen_list))
"""
Данное выражение можно прочитать следующим образом:
объявляем переменную gen_list, в которой создаем 
список генерирующий случайное число от 1 до 10
для каждого значения в range(10). При этом
тоже самое можно использовать при создании
многомерных списков
"""

# Вариант решения через цикл
print('создание списка случайных чисел классическим способом')
gen_list2 = []
for elem in range(10):
    gen_list2.append(random.randint(1, 10))
print(gen_list2, len(gen_list2))

"""
фактически создание подобного списка двумя этими
способами тождественны, т.е. могут заменить друг
друга. 
"""

print('создание многомерных списков через генераторы')

gen_list3 = [
    [random.randint(1, 10) for x in range(10)],
    [random.randint(1, 10) for x in range(10)],
    [random.randint(1, 10) for x in range(10)]
]
"""
При этом, следует отметить, что вложенные списки
представляют собой отдельные объекты, в нашем случае
отдельные списки. 
Обращение к ним происходит тем же способом, что и 
к объектам любого списка, т.е. по их индексу
gen_list3[0]
gen_list3[1]
gen_list3[2]
"""

print(gen_list3[0], gen_list3[1], gen_list3[2], sep='\n')

"""
Создание многомерного списка можно упростить еще больше, 
если Вы хорошо понимаете работу синтаксиса и базовые
операции ЯП Python
"""
print('создание многомерного списка случайных чисел вариант # 2')
gen_list4 = [[random.randint(1, 10) for i in range(10)] for x in range(3)]
print(gen_list4[0], gen_list4[1], gen_list4[2], sep='\n')

"""
В этом примере процесс создания списка происходит следующим образом:
Мы создаем список, он будет основным, в котором будут хранится другие наши списки
после чего задает генератор.
в генераторе первым укажем конструкцию наших вложенных списков
[random.randint(1, 10) for i in range(10)]
если мы объявим переменную и поместим в нее указанное выражение
мы получим список из 10 случайных чисел.
Организовав для основного списка еще один генератор
[[random.randint(1, 10) for i in range(10)] for x in range(3)]
мы получим 3 вложенных списка из 10 случайных значений
"""

print('обращение к объектам вложенных списков')
"""
gen_list5 = [
    [10, 4, 9, 5, 3, 5, 3, 9, 7, 1],
    [3, 8, 9, 10, 1, 9, 4, 1, 6, 9],
    [9, 7, 5, 6, 10, 2, 4, 9, 8, 9]
]

обратим внимание на такой многомерный список.
В нем каждый вложенный список, как мы выяснили выше, располагается
также как и в любом другом списке, в соответствии со своим индексом.
т.е. 
список # 1 - gen_list5[0]
список # 2 - gen_list5[1]
список # 3 - gen_list5[2]

Мы также можем обратиться к объекту внутри вложенного списка.
При этом обращение будет происходить также, как и к самому
вложенному списку, т.е. по индексу

gen_list5 = [
    [10, 4, 9, 5, 3, 5, 3, 9, 7, 1],
    [3, 8, 9, 10, 1, 9, 4, 1, 6, 9],
    [9, 7, 5, 6, 10, 2, 4, 9, 8, 9]
]

Предположим, что нам необходимо обратиться к числу 10
в списке # 1
1) для этого мы обращаемся к нему
gen_list5[0]
2) после чего указываем индекс нужного нам объекта
gen_list5[0][0]


"""

print('получаем значение 1 объекта во вложенном списке')
gen_list5 = [
    [10, 4, 9, 5, 3, 5, 3, 9, 7, 1],
    [3, 8, 9, 10, 1, 9, 4, 1, 6, 9],
    [9, 7, 5, 6, 10, 2, 4, 9, 8, 9]
]

print(gen_list5[0][3])

"""
Нужно понимать, что с каждым объектом вложенного списка, 
так и с самими вложенными списками мы также можем проводить
все те операции, которые нам понадобятся.
Т.е. мы можем их удалять, изменять, добавлять новые значения
копировать и т.д. 
"""
